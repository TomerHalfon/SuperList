---
alwaysApply: true
---

# SuperList - Shopping List Management App

## Project Overview
This is a Next.js 15 shopping list management application using MUI components with custom wrappers to avoid direct dependency on MUI throughout the codebase.

## Modular Rules Architecture

This project uses a modular rules system to keep documentation focused and manageable. Each rule file covers a specific aspect of the application:

### 📋 Core Rules
**File:** `core-rules.mdc`
- Project overview and architecture principles
- Folder structure and naming conventions
- Current implementation status
- Basic development rules and guidelines

### 🎨 UI Rules
**File:** `ui-rules.mdc`
- MUI component wrapping strategies
- Component structure patterns
- Error handling in components
- Form handling patterns
- Responsive design guidelines
- Accessibility best practices

### 💾 Data Rules
**File:** `data-rules.mdc`
- Storage abstraction layer (Repository pattern)
- Multi-backend support (JSON, Supabase)
- Validation with Zod schemas
- Server Actions with ActionResult pattern
- Factory pattern implementation
- Environment configuration

### 🔐 Authentication Rules
**File:** `auth-rules.mdc`
- Supabase authentication architecture
- Client/server separation patterns
- Route protection strategies
- OAuth integration
- Security best practices
- Middleware implementation

### 🌐 Internationalization Rules
**File:** `i18n-rules.mdc`
- next-intl configuration and setup
- Locale detection and cookie management
- Message structure and organization
- RTL (Right-to-Left) support
- Language switching components
- Localized validation schemas

### 🎨 Theme Rules
**File:** `theme-rules.mdc`
- Advanced theme system with 9 modes
- Theme categories and organization
- RTL-aware theming
- Theme persistence and system preference detection
- Custom theme creation
- Theme-aware component styling

### 🪝 Hooks Rules
**File:** `hooks-rules.mdc`
- React Query (TanStack Query v5) patterns
- Custom hooks architecture
- Optimistic updates and cache management
- Snackbar notification system
- Query key factories
- Mutation patterns with rollback

### ⚡ Performance Rules
**File:** `performance-rules.mdc`
- Code splitting and lazy loading
- Image optimization strategies
- Memoization patterns
- Bundle analysis and optimization
- Caching strategies
- Streaming and progressive loading
- Performance monitoring

### 🧪 Testing Rules
**File:** `testing-rules.mdc`
- Playwright E2E test patterns
- Component and page object models
- Testable UI guidelines and data-testid conventions
- Test isolation and authentication strategies
- Test data management with Supabase
- Internationalization testing approach

## Quick Reference

### Essential Patterns
1. **Always use custom MUI wrappers** - Never import MUI directly in business components
2. **Use repository pattern** - Abstract data access with interfaces
3. **Implement optimistic updates** - Use TanStack Query for better UX
4. **Validate on both client and server** - Use Zod schemas with localization
5. **Handle RTL automatically** - Use locale-based direction switching
6. **Use proper error boundaries** - Implement graceful error handling
7. **Optimize for performance** - Use code splitting and memoization

### Key Technologies
- **Next.js 15** - App Router, Server Components, Server Actions
- **Material-UI v7** - Custom wrapper components
- **Supabase** - Authentication and database
- **TanStack Query v5** - Server state management
- **next-intl** - Internationalization
- **Zod** - Validation with localization
- **TypeScript** - Type safety throughout

### Architecture Principles
- **Separation of Concerns** - Clear boundaries between layers
- **Repository Pattern** - Abstract data access
- **Provider Composition** - Nested context providers
- **ActionResult Pattern** - Consistent error handling
- **Custom Hook Architecture** - Reusable state logic
- **MUI Wrapper Pattern** - Component abstraction

## Getting Started

1. **Read Core Rules** - Start with `core-rules.mdc` for project overview
2. **Choose Your Focus** - Select relevant rule files based on your task
3. **Follow Patterns** - Use established patterns for consistency
4. **Check Best Practices** - Each rule file includes best practices sections
5. **Reference Examples** - All patterns include code examples

## Rule File Dependencies

```
core-rules.mdc (foundation)
├── ui-rules.mdc
├── data-rules.mdc
├── auth-rules.mdc
├── i18n-rules.mdc
├── theme-rules.mdc
├── hooks-rules.mdc
└── performance-rules.mdc
```

## Maintenance

- **Keep rules focused** - Each file should cover one main topic
- **Update examples** - Keep code examples current with implementation
- **Cross-reference** - Link related concepts between rule files
- **Version control** - Track changes to rules alongside code changes
- **Team review** - Ensure rules reflect team consensus

## Contributing

When adding new patterns or concepts:

1. **Identify the right rule file** - Don't create new files unless necessary
2. **Follow existing structure** - Use consistent formatting and organization
3. **Include examples** - Provide practical code examples
4. **Document best practices** - Explain why patterns are recommended
5. **Update cross-references** - Link to related concepts in other files

---

**Note:** This modular approach keeps each rule file focused and manageable (around 500 lines each), making it easier to find relevant information and maintain consistency across the codebase.# SuperList - Shopping List Management App

## Project Overview
This is a Next.js 15 shopping list management application using MUI components with custom wrappers to avoid direct dependency on MUI throughout the codebase.

## Modular Rules Architecture

This project uses a modular rules system to keep documentation focused and manageable. Each rule file covers a specific aspect of the application:

### 📋 Core Rules
**File:** `core-rules.mdc`
- Project overview and architecture principles
- Folder structure and naming conventions
- Current implementation status
- Basic development rules and guidelines

### 🎨 UI Rules
**File:** `ui-rules.mdc`
- MUI component wrapping strategies
- Component structure patterns
- Error handling in components
- Form handling patterns
- Responsive design guidelines
- Accessibility best practices

### 💾 Data Rules
**File:** `data-rules.mdc`
- Storage abstraction layer (Repository pattern)
- Multi-backend support (JSON, Supabase)
- Validation with Zod schemas
- Server Actions with ActionResult pattern
- Factory pattern implementation
- Environment configuration

### 🔐 Authentication Rules
**File:** `auth-rules.mdc`
- Supabase authentication architecture
- Client/server separation patterns
- Route protection strategies
- OAuth integration
- Security best practices
- Middleware implementation

### 🌐 Internationalization Rules
**File:** `i18n-rules.mdc`
- next-intl configuration and setup
- Locale detection and cookie management
- Message structure and organization
- RTL (Right-to-Left) support
- Language switching components
- Localized validation schemas

### 🎨 Theme Rules
**File:** `theme-rules.mdc`
- Advanced theme system with 9 modes
- Theme categories and organization
- RTL-aware theming
- Theme persistence and system preference detection
- Custom theme creation
- Theme-aware component styling

### 🪝 Hooks Rules
**File:** `hooks-rules.mdc`
- React Query (TanStack Query v5) patterns
- Custom hooks architecture
- Optimistic updates and cache management
- Snackbar notification system
- Query key factories
- Mutation patterns with rollback

### ⚡ Performance Rules
**File:** `performance-rules.mdc`
- Code splitting and lazy loading
- Image optimization strategies
- Memoization patterns
- Bundle analysis and optimization
- Caching strategies
- Streaming and progressive loading
- Performance monitoring

### 🧪 Testing Rules
**File:** `testing-rules.mdc`
- Playwright E2E test patterns
- Component and page object models
- Testable UI guidelines and data-testid conventions
- Test isolation and authentication strategies
- Test data management with Supabase
- Internationalization testing approach

## Quick Reference

### Essential Patterns
1. **Always use custom MUI wrappers** - Never import MUI directly in business components
2. **Use repository pattern** - Abstract data access with interfaces
3. **Implement optimistic updates** - Use TanStack Query for better UX
4. **Validate on both client and server** - Use Zod schemas with localization
5. **Handle RTL automatically** - Use locale-based direction switching
6. **Use proper error boundaries** - Implement graceful error handling
7. **Optimize for performance** - Use code splitting and memoization

### Key Technologies
- **Next.js 15** - App Router, Server Components, Server Actions
- **Material-UI v7** - Custom wrapper components
- **Supabase** - Authentication and database
- **TanStack Query v5** - Server state management
- **next-intl** - Internationalization
- **Zod** - Validation with localization
- **TypeScript** - Type safety throughout

### Architecture Principles
- **Separation of Concerns** - Clear boundaries between layers
- **Repository Pattern** - Abstract data access
- **Provider Composition** - Nested context providers
- **ActionResult Pattern** - Consistent error handling
- **Custom Hook Architecture** - Reusable state logic
- **MUI Wrapper Pattern** - Component abstraction

## Getting Started

1. **Read Core Rules** - Start with `core-rules.mdc` for project overview
2. **Choose Your Focus** - Select relevant rule files based on your task
3. **Follow Patterns** - Use established patterns for consistency
4. **Check Best Practices** - Each rule file includes best practices sections
5. **Reference Examples** - All patterns include code examples

## Rule File Dependencies

```
core-rules.mdc (foundation)
├── ui-rules.mdc
├── data-rules.mdc
├── auth-rules.mdc
├── i18n-rules.mdc
├── theme-rules.mdc
├── hooks-rules.mdc
└── performance-rules.mdc
```

## Maintenance

- **Keep rules focused** - Each file should cover one main topic
- **Update examples** - Keep code examples current with implementation
- **Cross-reference** - Link related concepts between rule files
- **Version control** - Track changes to rules alongside code changes
- **Team review** - Ensure rules reflect team consensus

## Contributing

When adding new patterns or concepts:

1. **Identify the right rule file** - Don't create new files unless necessary
2. **Follow existing structure** - Use consistent formatting and organization
3. **Include examples** - Provide practical code examples
4. **Document best practices** - Explain why patterns are recommended
5. **Update cross-references** - Link to related concepts in other files

---

**Note:** This modular approach keeps each rule file focused and manageable (around 500 lines each), making it easier to find relevant information and maintain consistency across the codebase.